#!/usr/bin/env python3

# standard imports
import argparse
import bittensor
import subprocess
import time


def _parse_args():
    class Pm2Action(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            # Set the class to use
            setattr(namespace, "checker_class", ValidatorUpdatedCheckerPm2)
            # Set the process name arg
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-n", "--netuid",
        type=int,
        required=True,
        help="The uid of the subnet.")

    parser.add_argument(
        "-p", "--pm2-process",
        action = Pm2Action,
        required=True,
        help="The name of the pm2 process.")

    return parser.parse_args()


class ValidatorUpdatedChecker:
    _rizzo_hotkey = "5F2CsUDVbRbVMXTh9fAzF9GacjVX7UapvRxidrxe7z8BYckQ"
    _updated_threshold = 4
    _updated_check_increment = 0.5
    
    def __init__(self):
        bittensor.logging.enable_debug()

        self._check_for_restart = True

        self._subtensor = bittensor.subtensor()
        self._subnet_tempo = self._subtensor.get_subnet_hyperparameters(
            self._netuid).tempo
        self._restart_threshold = self._subnet_tempo * self._updated_threshold

        metagraph = self._subtensor.metagraph(netuid=self._netuid)
        self._rizzo_uid = metagraph.hotkeys.index(self._rizzo_hotkey)

        self._run()

    def _run(self):
        sleep_interval = int(
            self._subnet_tempo * self._updated_check_increment * 12
        )
        while True:
            self._check_updated_value()
            bittensor.logging.info(f"Sleeping for {sleep_interval} seconds.")
            time.sleep(sleep_interval)

    def _check_updated_value(self):
        bittensor.logging.info("")
        rizzo_updated = self._subtensor.blocks_since_last_update(
                netuid=self._netuid, uid=self._rizzo_uid)
        bittensor.logging.info(f"Rizzo Updated is {rizzo_updated} blocks.")

        if self._check_for_restart:
            # If the rizzo updated value is greater than the restart threshold
            # the do a restart and set _check_for_restart to False.
            bittensor.logging.info("Check for restart is True.")
            if rizzo_updated >= self._restart_threshold:
                bittensor.logging.info(f"Updated value {rizzo_updated} "
                                       f">= {self._restart_threshold}")
                if self._do_restart():
                    bittensor.logging.info("Setting check for restart to False.")
                    self._check_for_restart = False
            else:
                bittensor.logging.info(f"Updated value {rizzo_updated} "
                                       f"< {self._restart_threshold}")
                bittensor.logging.info("Doing nothing.")
        else:
            # If the rizzo updated value is less than the restart threshold
            # then set _check_for_restart.
            bittensor.logging.info("Check for restart is False.")
            if rizzo_updated < self._restart_threshold:
                bittensor.logging.info(f"Updated value {rizzo_updated} "
                                       f"< {self._restart_threshold}")
                bittensor.logging.info("Setting check for restart to True.")
                self._check_for_restart = True
            else:
                bittensor.logging.info(f"Updated value {rizzo_updated} "
                                       f">= {self._restart_threshold}")
                bittensor.logging.info("Doing nothing.")

    def _do_restart(self):
        raise NotImplementedError


class ValidatorUpdatedCheckerPm2(ValidatorUpdatedChecker):
    def __init__(self, options):
        self._netuid = options.netuid
        self._process_name = options.pm2_process
        super(ValidatorUpdatedCheckerPm2, self).__init__()

    def _do_restart(self):
        bittensor.logging.info(f"Restarting process '{self._process_name}'.")

        # There is a pm2 python module but it's buggy.
        # Doing this manually instead.
        restart_cmd = ["pm2", "restart", self._process_name]
        restart_cmd_str = " ".join(restart_cmd)
        bittensor.logging.info(f"Running command: '{restart_cmd_str}'")
        process = subprocess.Popen(
            restart_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        
        if process.returncode:
            stderr = stderr.decode()
            bittensor.logging.error(
                f"'{restart_cmd_str}' command failed with return code "
                f"{process.returncode}. Error:\n{stderr}")
            return False
        
        stdout = stdout.decode()
        bittensor.logging.info(f"Restart command output:\n{stdout}")
        bittensor.logging.info(f"Process '{self._process_name}' "
                                "successfully restarted.")
        return True


# TODO - Implement this
class ValidatorUpdatedCheckerDocker(ValidatorUpdatedChecker):
    pass


def main():
    options = _parse_args()
    options.checker_class(options)


if __name__ == "__main__":
    main()
