#!/usr/bin/env python3

# bittensor import
import bittensor

# standard imports
import argparse
import json
import os
import subprocess
import time


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-n", "--netuid",
        type=int,
        required=True,
        help="The uid of the subnet.")
    
    parser.add_argument(
        "--restart-script",
        required=True,
        help="The restart script path.")

    parser.add_argument(
        "--pm2-process",
        required=True,
        help="Restart the validator based on log patterns. The value passed "
             "to this arg is the name of the pm2 process to monitor.")

    parser.add_argument(
        "--error-log-threshold",
        type=float,
        default=30,
        help="The time in minutes after which to restart the process if the "
             "pm2 error log file hasn't updated.")

    return parser.parse_args()


class ValidatorChecker:
    def __init__(self, options):
        self._netuid = options.netuid
        self._restarter = options.restarter_class(self, options)

        self._init_setup(options)

        self._run()
    
    def _log_info(self, message):
        bittensor.logging.info(f"{self.log_prefix}: {message}")

    def _log_error(self, message):
        bittensor.logging.error(f"{self.log_prefix}: {message}")

    def _init_setup(self, options):
        raise NotImplementedError("Must be implemented in subclasses.")

    def _run(self):
        raise NotImplementedError("Must be implemented in subclasses.")

class ValidatorCheckerPm2StoppedLogs(ValidatorChecker):
    log_prefix = "CHECK LOGS STOPPED"

    def _init_setup(self, options):
        self._pm2_process = options.pm2_process
        self._restart_threshold = options.error_log_threshold * 60

    def _run(self):
        self._log_info("")
        self._log_info("Checking for stopped logs.")
        self._log_info("")

        process = subprocess.run(["pm2", "jlist"], stdout=subprocess.PIPE)
        pm2_output = json.loads(process.stdout)
        for pm2_process in pm2_output:
            if pm2_process["name"] == self._pm2_process:
                log_file =  pm2_process['pm2_env']['pm_err_log_path']
                break

        self._log_info(f"Log file: {log_file}")

        while True:
            log_file_mtime = int(os.path.getmtime(log_file))
            current_time = int(time.time())
            log_file_ctime = time.ctime(log_file_mtime)
            current_ctime = time.ctime(current_time)
            self._log_info("")
            self._log_info(f"Log file last modified: {log_file_ctime}")
            self._log_info(f"Current time: {current_ctime}")

            time_diff = current_time - log_file_mtime
            if time_diff >= self._restart_threshold:
                self._log_info(f"Time difference {time_diff} seconds "
                               f">= {self._restart_threshold} seconds")
                log_minutes = time_diff / 60
                self._restarter.do_restart(f"No log output in {log_minutes:.1f} minutes.")
            else:
                self._log_info(f"Time difference {time_diff} seconds "
                               f"< {self._restart_threshold} seconds")
                self._log_info("Doing nothing.")

            seconds_until_threshold = \
                (self._restart_threshold - time_diff)
            sleep_interval = (seconds_until_threshold
                              if seconds_until_threshold > 0
                              else self._restart_threshold)
            self._log_info(f"Sleeping for {sleep_interval} seconds.")
            time.sleep(sleep_interval)


class ValidatorRestarterRsnScript:
    _discord_monitor_url = (
    "https://discord.com/api/webhooks/1307044814348488704/"
    "uYEDTqa89CI-NPau5zDyET_JTGt1r2j1u3ARvSEVCKP7-nnOfvCoUoEKwdZCLoiXKsjV"
    )

    def __init__(self, checker_obj, options):
        self._checker_obj = checker_obj
        self._netuid = options.netuid
        self._restart_script =  os.path.expanduser(options.restart_script)
        self._restart_dir = os.path.expanduser(
            f"~/restart_scripts_sn{options.netuid}")
        os.makedirs(self._restart_dir, exist_ok=True)
        for restart_file in os.listdir(self._restart_dir):
            restart_file_path = os.path.join(self._restart_dir, restart_file)
            if os.path.isfile(restart_file_path):
                os.unlink(restart_file_path)

    def _log_info(self, message):
        bittensor.logging.info(f"{self._checker_obj.log_prefix}: {message}")

    def _log_error(self, message):
        bittensor.logging.error(f"{self._checker_obj.log_prefix}: {message}")

    def do_restart(self, description):
        # TODO: acquire threading lock
        self._do_restart(description)

    def _do_restart(self, description):
        script_name =  "restart_bad_validator"

        self._log_info(f"Restarting subnet {self._netuid}: {description}.")
        self._log_info(f"Running script: {self._restart_script}")

        restart_cmd = [self._restart_script]

        restart_cmd_str = " ".join(restart_cmd)
        self._log_info(f"Running command: '{restart_cmd_str}'")
        process = subprocess.run(restart_cmd)

        if process.returncode:
            self._log_error(
                f"'{restart_cmd_str}' command failed with return code "
                f"{process.returncode}.")
            self._send_monitor_notification(
                f"{script_name}: Failed to restart subnet {self._netuid} - {description}")
            return False
        
        self._log_info(f"Subnet '{self._netuid}' successfully restarted.")
        self._send_monitor_notification(
            f"{script_name}: Successfully restarted on subnet {self._netuid} - {description}")

        return True

    def _send_monitor_notification(self, message):
        payload = json.dumps({"content": message})
        monitor_cmd = [
            "curl", "-H", "Content-Type: application/json",
            "-d", payload, self._discord_monitor_url
        ]
        monitor_cmd_str = " ".join(monitor_cmd)
        self._log_info(f"Running command: '{monitor_cmd_str}'")
        process = subprocess.run(monitor_cmd)

        if process.returncode:
            self._log_error(
                f"'{monitor_cmd_str}' command failed with return code "
                f"{process.returncode}.")
        else:
            self._log_info("Monitor notification successfully sent.")


def main():
    bittensor.logging.enable_debug()
    options = _parse_args()
    options.restarter_class = ValidatorRestarterRsnScript

    sleep_time = 15
    script_name =  os.path.basename(__file__)
    bittensor.logging.info("")
    bittensor.logging.info(f"Starting {script_name} on subnet {options.netuid}")
    bittensor.logging.info(f"Sleeping {sleep_time} seconds in case the "
                            "validator process is just starting.")
    bittensor.logging.info("")
    time.sleep(sleep_time)

    bittensor.logging.info("")
    bittensor.logging.info("================================")
    bittensor.logging.info("Running stopped logs checker.")
    bittensor.logging.info("================================")
    bittensor.logging.info("")
    ValidatorCheckerPm2StoppedLogs(options)


if __name__ == "__main__":
    main()
