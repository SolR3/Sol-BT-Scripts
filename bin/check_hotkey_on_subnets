#!/usr/bin/env python3

# standard imports
import argparse
import asyncio

# Bittensor import
from bittensor.core.async_subtensor import AsyncSubtensor


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-s", "--subnets",
        nargs="+",
        type=int,
        help="When specified, the list of netuids are checked. When not "
             "specified, all subnets are checked.")

    parser.add_argument(
        "-d", "--diff",
        action="store_true",
        help="When specified, only the subnets with a different hotkey are printed.")

    parser.add_argument(
        "-n", "--vali-name",
        choices=["rt21"],
        default="rizzo",
        help="Specify a different validator to check.")

    parser.add_argument(
        "-l", "--local-subtensor",
        help="Use the specified local subtensor (i.e. la, cali, titan, etc.). "
             "When not specified, use the 'finney' network subtensor.")

    return parser.parse_args()


async def get_metagraphs(network, netuids):
    async with AsyncSubtensor(network=network) as subtensor:
        if not netuids:
            netuids = await subtensor.get_subnets()
            netuids = netuids[1:]

        # Get the block to pass to async calls so everything is in sync
        block = await subtensor.block

        # Get the metagraph for each netuid
        metagraphs = await asyncio.gather(
            *[
                subtensor.metagraph(netuid=netuid, block=block)
                for netuid in netuids
            ]
        )
    
    return metagraphs


async def main(options):
    keys = {
        "rizzo": {
            "hotkey": "5GduQSUxNJ4E3ReCDoPDtoHHgeoE4yHmnnLpUXBz9DAwmHWV",
            "coldkey": "5CMEwRYLefRmtJg7zzRyJtcXrQqmspr9B1r1nKySDReA37Z1",
        },
        "rt21": {
            "hotkey": "5Gq2gs4ft5dhhjbHabvVbAhjMCV2RgKmVJKAFCUWiirbRT21",
            "coldkey": "5GZSAgaVGQqegjhEkxpJjpSVLVmNnE2vx2PFLzr7kBBMKpGQ",
        },
    }.get(options.vali_name)
    main_hotkey = keys["hotkey"]
    coldkey = keys["coldkey"]

    network = (
        f"ws://subtensor-{options.local_subtensor}.rizzo.network:9944"
        if options.local_subtensor
        else "finney"
    )
    netuids = options.subnets 

    metagraphs = await get_metagraphs(network, netuids)

    # The two discrepancies we want to catch are:
    # 1) If the main hotkey exists on a subnet but the coldkey doesn't.
    # 2) If both exist and the uids are different between the two.
    missing_coldkeys = []
    mismatched_keys = []

    hotkeys = []
    for metagraph in metagraphs:
        try:
            main_hotkey_index = metagraph.hotkeys.index(main_hotkey)
        except ValueError:
            main_hotkey_index = None

        try:
            coldkey_index = metagraph.coldkeys.index(coldkey)
        except ValueError:
            if main_hotkey_index is not None:
                # 1) Main hotkey exists on a subnet but the coldkey doesn't.
                missing_coldkeys.append((
                    metagraph.netuid,
                    int(metagraph.uids[main_hotkey_index]),
                    metagraph.coldkeys[main_hotkey_index],
                ))
            continue

        if main_hotkey_index and main_hotkey_index != coldkey_index:
            # 2) Both exist and the uids are different between the two.
            mismatched_keys.append((
                metagraph.netuid,
                int(metagraph.uids[coldkey_index]),
                metagraph.hotkeys[coldkey_index],
                int(metagraph.uids[main_hotkey_index]),
                metagraph.coldkeys[main_hotkey_index],
            ))
            continue

        hotkey = metagraph.hotkeys[coldkey_index]
        if not options.diff or hotkey != main_hotkey:
            hotkeys.append((metagraph.netuid, hotkey))

    if missing_coldkeys:
        print("")
        print("Missing coldkeys:")
        for netuid, uid, ck in missing_coldkeys:
            print(f"{netuid}: {uid} --> {ck}")
    
    if mismatched_keys:
        print("")
        print("Mismatched keys:")
        for netuid, cuid, hk, huid, ck in mismatched_keys:
            print(f"{netuid}:")
            print(f"    ck: {cuid} --> {hk}")
            print(f"    hk: {huid} --> {ck}")

    print("")
    print("Hotkeys:")
    for netuid, hotkey in hotkeys:
        print(f"{netuid} --> {hotkey}")


if __name__ == "__main__":
    options = _parse_args()

    asyncio.run(main(options))
