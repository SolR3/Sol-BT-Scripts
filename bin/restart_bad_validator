#!/usr/bin/env python3

# standard imports
import argparse
from concurrent.futures import ThreadPoolExecutor
import json
import os
import pty
import re
import subprocess
import tempfile
import time


# Constants
DEFAULT_UPDATED_THRESHOLD = 1500
DEFAULT_VTRUST_THRESHOLD = 0.01
DEFAULT_STOPPED_LOGS_THRESHOLD = 30
DEFAULT_LOG_ERRORS_RESTART_WAIT_TIME = 2
TOTAL_CHECKS = 6  # TODO: Calculate this instead of hard-coding it.


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-n", "--netuid",
        type=int,
        required=True,
        help="The uid of the subnet.")

    parser.add_argument(
        "--restart-script",
        required=True,
        help="The restart script path.")

    parser.add_argument(
        "--restart-venv",
        help="The restart venv path.")

    parser.add_argument(
        "--pm2-process",
        help="Restart the validator based on pm2 log patterns or stopped pm2 "
             "log output. The value passed to this arg is the name of the pm2 "
             "process to monitor.")

    parser.add_argument(
        "--docker-container",
        help="Restart the validator based on docker log patterns. The value "
             "passed to this arg is the name of the docker container to monitor.")

    parser.add_argument(
        "--local-subtensor",
        help="Use the specified local subtensor (i.e. la, cali, titan, etc.). "
        "When not specified, use the 'finney' network subtensor.")

    parser.add_argument(
        "--updated-threshold",
        type=int,
        default=DEFAULT_UPDATED_THRESHOLD,
        help="The Updated threshold value above which to restart the "
             "validator. This value is in blocks. "
             f"Default: {DEFAULT_UPDATED_THRESHOLD}")

    parser.add_argument(
        "--vtrust-threshold",
        type=float,
        default=DEFAULT_VTRUST_THRESHOLD,
        help="The vTrust threshold value below which to restart the "
             "validator. "
             f"Default: {DEFAULT_VTRUST_THRESHOLD}")

    parser.add_argument(
        "--stopped-logs-threshold",
        type=float,
        default=DEFAULT_STOPPED_LOGS_THRESHOLD,
        help="The time in minutes after which to restart the process if the "
             "pm2 log files haven't updated. "
             f"Default: {DEFAULT_STOPPED_LOGS_THRESHOLD}")

    parser.add_argument(
        "--log-errors-restart-wait-time",
        type=float,
        default=DEFAULT_LOG_ERRORS_RESTART_WAIT_TIME,
        help="The number of minutes to wait after restarting a the validator "
             "due to a pm2 log patterns error so it doesn't get restarted multiple "
             "times due to duplicate or quickly recurring error patterns. NOTE: "
             "this only applies to pm2 logs. Docker logs are unaffected by this."
             f"Default: {DEFAULT_LOG_ERRORS_RESTART_WAIT_TIME}")

    parser.add_argument(
        "--do-vtrust-check",
        action="store_true",
        dest="do_check_vtrust",
        help="When specified, this will do the checking of the vTrust value. "
             "Note: Unlike most of the other checks, this one is opt-in "
             "rather than opt-out.")
    
    parser.add_argument(
        "--skip-code-check",
        action="store_false",
        dest="do_check_code",
        help="When specified, this will do the checking for git code updates. "
             "Note: Unlike most of the other checks, this one is opt-in "
             "rather than opt-out. WARNING: This check currentl requires that the "
             "restarter be run from the base git repo folder.")

    parser.add_argument(
        "--skip-updated-check",
        action="store_false",
        dest="do_check_updated",
        help="When specified, this will skip the checking of the Updated value.")

    parser.add_argument(
        "--skip-log-errors-check",
        action="store_false",
        dest="do_check_errors",
        help="When specified, this will skip the checking of the log output "
             "for error patterns.")

    parser.add_argument(
        "--skip-stopped-logs-check",
        action="store_false",
        dest="do_check_stopped_logs",
        help="When specified, this will skip the checking whether the pm2 log "
             "files sotpped udpdating.")

    parser.add_argument(
        "--skip-discord-notify",
        action="store_false",
        dest="discord_notify",
        help="When specified, this will skip sending the notification to the "
             "discord monitor channel.")

    return parser.parse_args()


class ValidatorChecker:
    _rizzo_hotkey = "5F2CsUDVbRbVMXTh9fAzF9GacjVX7UapvRxidrxe7z8BYckQ"

    def __init__(self, options):
        self._netuid = options.netuid
        self._restarter = options.restarter_class(self, options)

        self._init_setup(options)

        self._run()

    def _log_info(self, message):
        bittensor.logging.info(f"{self.log_prefix}: {message}")

    def _log_error(self, message):
        bittensor.logging.error(f"{self.log_prefix}: {message}")

    def _init_setup(self, options):
        raise NotImplementedError("Must be implemented in subclasses.")

    def _run(self):
        raise NotImplementedError("Must be implemented in subclasses.")


class ValidatorCheckerUpdated(ValidatorChecker):
    log_prefix = "CHECK UPDATED"

    def _init_setup(self, options):
        self._restart_threshold = options.updated_threshold

        # Start false in case this is added after a manual restart
        # but before it started setting weights again
        # TODO - Fix this whole logic
        self._check_for_restart = False

        self._subtensor = bittensor.subtensor(network=options.network)
        metagraph = self._subtensor.metagraph(netuid=self._netuid)
        self._rizzo_uid = metagraph.hotkeys.index(self._rizzo_hotkey)

    def _run(self):
        self._log_info("")
        self._log_info("Checking for high Updated values.")
        self._log_info("")

        while True:
            if hasattr(self._subtensor, "blocks_since_last_update"):
                rizzo_updated = self._subtensor.blocks_since_last_update(
                        netuid=self._netuid, uid=self._rizzo_uid)
            else:
                # Really old version of bittensor
                metagraph = self._subtensor.metagraph(netuid=self._netuid)
                rizzo_updated = int(
                    metagraph.block - metagraph.last_update[self._rizzo_uid])
            self._log_info("")
            self._log_info(f"Rizzo Updated is {rizzo_updated} blocks.")

            if self._check_for_restart:
                # If the rizzo updated value is greater than the restart threshold
                # the do a restart and set _check_for_restart to False.
                self._log_info("Updated value check for restart is True.")
                if rizzo_updated >= self._restart_threshold:
                    self._log_info(f"Updated value {rizzo_updated} "
                                   f">= {self._restart_threshold}")
                    self._restarter.do_restart(f"Updated value is {rizzo_updated}")
                    self._log_info("Setting check for restart to False.")
                    self._check_for_restart = False
                else:
                    self._log_info(f"Updated value {rizzo_updated} "
                                   f"< {self._restart_threshold}")
                    self._log_info("Doing nothing.")
            else:
                # If the rizzo updated value is less than the restart threshold
                # then set _check_for_restart to True.
                self._log_info("Updated value Check for restart is False.")
                if rizzo_updated < self._restart_threshold:
                    self._log_info(f"Updated value {rizzo_updated} "
                                   f"< {self._restart_threshold}")
                    self._log_info("Setting check for restart to True.")
                    self._check_for_restart = True
                else:
                    self._log_info(f"Updated value {rizzo_updated} "
                                   f">= {self._restart_threshold}")
                    self._log_info("Doing nothing.")

            default_sleep_time = 4320 # 360 blocks
            seconds_until_threshold = \
                (self._restart_threshold - rizzo_updated) * 12
            sleep_interval = (seconds_until_threshold
                              if seconds_until_threshold > 0
                              else default_sleep_time)
            self._log_info(f"Sleeping for {sleep_interval} seconds.")
            time.sleep(sleep_interval)


class ValidatorCheckerVTrust(ValidatorChecker):
    log_prefix = "CHECK VTRUST"

    def _init_setup(self, options):
        self._restart_threshold = options.vtrust_threshold

        # Start false in case this is added after a manual restart
        # but before the vTrust goes back up again
        # TODO - Fix this whole logic
        self._check_for_restart = False

        self._subtensor = bittensor.subtensor(network=options.network)
        metagraph = self._subtensor.metagraph(netuid=self._netuid)
        self._rizzo_uid = metagraph.hotkeys.index(self._rizzo_hotkey)

    def _run(self):
        self._log_info("")
        self._log_info("Checking for low vTrust values.")
        self._log_info("")

        while True:
            metagraph = self._subtensor.metagraph(netuid=self._netuid)
            rizzo_vtrust = metagraph.Tv[self._rizzo_uid]
            vtrust_str = f"{rizzo_vtrust:.5f}"

            self._log_info("")
            self._log_info(f"Rizzo vTrust is {vtrust_str}")

            if self._check_for_restart:
                # If the rizzo vTrust value is less than the restart threshold
                # the do a restart and set _check_for_restart to False.
                self._log_info("vTrust value check for restart is True.")
                if rizzo_vtrust < self._restart_threshold:
                    self._log_info(f"vTrust value {vtrust_str} "
                                   f"< {self._restart_threshold}")
                    self._restarter.do_restart(f"vTrust value is {vtrust_str}")
                    self._log_info("Setting check for restart to False.")
                    self._check_for_restart = False
                else:
                    self._log_info(f"vTrust value {vtrust_str} "
                                   f">= {self._restart_threshold}")
                    self._log_info("Doing nothing.")
            else:
                # If the rizzo vTrust value is greater than the restart threshold
                # then set _check_for_restart to True.
                self._log_info("vTrust value Check for restart is False.")
                if rizzo_vtrust >= self._restart_threshold:
                    self._log_info(f"vTrust value {vtrust_str} "
                                   f">= {self._restart_threshold}")
                    self._log_info("Setting check for restart to True.")
                    self._check_for_restart = True
                else:
                    self._log_info(f"vTrust value {vtrust_str} "
                                   f"< {self._restart_threshold}")
                    self._log_info("Doing nothing.")

            sleep_interval = 4320 # 360 blocks
            self._log_info(f"Sleeping for {sleep_interval} seconds.")
            time.sleep(sleep_interval)


class ValidatorCheckerDockerLogErrors(ValidatorChecker):
    log_prefix = "CHECK DOCKER LOG ERRORS"
    _generic_patterns = [r"\[Errno 32\] Broken pipe"]
    _subnet_patterns = []

    def _init_setup(self, options):
        self._docker_container = options.docker_container

    def _run(self):
        self._log_info("")
        self._log_info("Checking for log patterns.")
        self._log_info("")

        log_regexes = []
        for log_pattern in self._generic_patterns + self._subnet_patterns:
            log_regexes.append(re.compile(log_pattern))
        command = ["docker", "logs", self._docker_container, "--since", "15s", "--follow"]
        command_str = " ".join(command)

        while True:
            self._log_info(f"Launching process: \"{command_str}\"")

            mfd, sfd = pty.openpty()
            process = subprocess.Popen(
                command, stdout=sfd, stderr=subprocess.STDOUT)
            os.close(sfd)
            master = os.fdopen(mfd)
            while True:
                try:
                    line = master.readline()
                except:
                    # The process exited.
                    self._log_info(f"Process exited: \"{command_str}\"")
                    break
                else:
                    do_restart = False
                    for log_regex in log_regexes:
                        match = log_regex.search(line)
                        if match:
                            do_restart = True
                            pattern = match.group()
                            self._log_info(
                                f"Log line matches a restart pattern: \"{pattern}\"\n"
                                f"{line}\n")
                            self._restarter.do_restart(
                                f"Docker log output matches a restart pattern: \"{pattern}\""
                            )
                            break
                    if do_restart:
                        break

            self._log_info(f"Killing process: \"{command_str}\"")
            process.kill()
            master.close()
            sleep_time = 15
            self._log_info(f"Sleeping {sleep_time} seconds")
            time.sleep(sleep_time)


class ValidatorCheckerPm2LogErrors(ValidatorChecker):
    log_prefix = "CHECK PM2 LOG ERRORS"
    _generic_patterns = [r"\[Errno 32\] Broken pipe"]
    _subnet_patterns = []

    def _init_setup(self, options):
        self._pm2_process = options.pm2_process
        self._restart_wait_time = options.log_errors_restart_wait_time

    def _run(self):
        self._log_info("")
        self._log_info("Checking for log patterns.")
        self._log_info("")

        log_regexes = []
        for log_pattern in self._generic_patterns + self._subnet_patterns:
            log_regexes.append(re.compile(log_pattern))
        command = ["pm2", "log", self._pm2_process, "--raw"]
        command_str = " ".join(command)

        while True:
            restart_time = 0
            restarted = True
            self._log_info(f"Launching process: \"{command_str}\"")

            mfd, sfd = pty.openpty()
            process = subprocess.Popen(
                command, stdout=sfd, stderr=subprocess.STDOUT)
            os.close(sfd)
            master = os.fdopen(mfd)
            while True:
                try:
                    line = master.readline()
                except:
                    # The process exited.
                    self._log_info(f"Process exited: \"{command_str}\"")
                    break
                else:
                    if not restarted:
                        if time.time() < restart_time:
                            continue
                        restarted = True
                        self._log_info("Restarting log patterns monitor.")

                    for log_regex in log_regexes:
                        match = log_regex.search(line)
                        if match:
                            pattern = match.group()
                            self._log_info(
                                f"Log line matches a restart pattern: \"{pattern}\"\n"
                                f"{line}\n")
                            self._restarter.do_restart(
                                f"Pm2 log output matches a restart pattern: \"{pattern}\""
                            )

                            restart_time = (
                                time.time() + (self._restart_wait_time * 60)
                            )
                            restarted = False
                            self._log_info(
                                f"Waiting {self._restart_wait_time} minutes "
                                 "after restart.")
                            break

            self._log_info(f"Killing process: \"{command_str}\"")
            process.kill()
            master.close()
            sleep_time = 15
            self._log_info(f"Sleeping {sleep_time} seconds")
            time.sleep(sleep_time)


class ValidatorCheckerPm2LogErrorsSn1(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"json\.decoder\.JSONDecodeError:"]

class ValidatorCheckerPm2LogErrorsSn10(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"Error during validation"]

class ValidatorCheckerPm2LogErrorsSn16(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"ConnectionRefusedError"]

class ValidatorCheckerPm2LogErrorsSn18(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"asyncio\.exceptions\.CancelledError"]

# class ValidatorCheckerPm2LogErrorsSn20(ValidatorCheckerPm2LogErrors):
#     _subnet_patterns = [r"Error in forward: Failed to get task after \d+ attempts"]

class ValidatorCheckerPm2LogErrorsSn21(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"asyncio\.exceptions\.CancelledError"]

# class ValidatorCheckerPm2LogErrorsSn24(ValidatorCheckerPm2LogErrors):
#     _subnet_patterns = [r"EOF occurred in violation of protocol"]

class ValidatorCheckerPm2LogErrorsSn28(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"Transaction has an ancient birth block"]

class ValidatorCheckerPm2LogErrorsSn30(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"asyncio\.exceptions\.CancelledError"]

class ValidatorCheckerPm2LogErrorsSn34(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [
        r"Handshake status 502 Bad Gateway",
        r"Error during validation",
    ]

class ValidatorCheckerPm2LogErrorsSn38(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"\[Errno -2\] Name or service not known"]

class ValidatorCheckerPm2LogErrorsSn42(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"EOF occurred in violation of protocol"]

class ValidatorCheckerPm2LogErrorsSn43(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"Error during validation"]

class ValidatorCheckerPm2LogErrorsSn55(ValidatorCheckerPm2LogErrors):
    _subnet_patterns = [r"websockets\.exceptions\.InvalidStatus"]


class ValidatorCheckerPm2StoppedLogs(ValidatorChecker):
    log_prefix = "CHECK PM2 LOGS STOPPED"

    def _init_setup(self, options):
        self._pm2_process = options.pm2_process
        self._restart_threshold = int(round(options.stopped_logs_threshold * 60))

    def _run(self):
        self._log_info("")
        self._log_info("Checking for stopped logs.")
        self._log_info("")

        process = subprocess.run(["pm2", "jlist"], stdout=subprocess.PIPE)
        pm2_output = json.loads(process.stdout)
        for pm2_process in pm2_output:
            if pm2_process["name"] == self._pm2_process:
                out_log_file =  pm2_process["pm2_env"]["pm_out_log_path"]
                error_log_file =  pm2_process["pm2_env"]["pm_err_log_path"]
                break

        self._log_info(f"Out Log file: {out_log_file}")
        self._log_info(f"Error Log file: {error_log_file}")

        while True:
            out_log_file_mtime = int(os.path.getmtime(out_log_file))
            error_log_file_mtime = int(os.path.getmtime(error_log_file))
            current_time = int(time.time())
            out_log_file_ctime = time.ctime(out_log_file_mtime)
            error_log_file_ctime = time.ctime(error_log_file_mtime)
            current_ctime = time.ctime(current_time)
            self._log_info("")
            self._log_info(f"Out Log file last modified: {out_log_file_ctime}")
            self._log_info(f"Error Log file last modified: {error_log_file_ctime}")
            self._log_info(f"Current time: {current_ctime}")

            time_diff = current_time - max(out_log_file_mtime, error_log_file_mtime)
            if time_diff >= self._restart_threshold:
                self._log_info(f"Time difference {time_diff} seconds "
                               f">= {self._restart_threshold} seconds")
                log_minutes = time_diff / 60
                self._restarter.do_restart(f"No log output in {log_minutes:.1f} minutes.")
            else:
                self._log_info(f"Time difference {time_diff} seconds "
                               f"< {self._restart_threshold} seconds")
                self._log_info("Doing nothing.")

            seconds_until_threshold = \
                (self._restart_threshold - time_diff)
            sleep_interval = (seconds_until_threshold
                              if seconds_until_threshold > 0
                              else self._restart_threshold)
            self._log_info(f"Sleeping for {sleep_interval} seconds.")
            time.sleep(sleep_interval)


class ValidatorCheckerCodeUpdate(ValidatorChecker):
    log_prefix = "CHECK CODE UPDATE"

    def _init_setup(self, options):
        pass

    def _run(self):
        self._log_info("")
        self._log_info("Checking for code updates.")
        self._log_info("")

        get_cmd = ["git", "rev-parse", "HEAD"]
        get_cmd_str = " ".join(get_cmd)
        pull_cmd = ["git", "pull", "--autostash"]
        pull_cmd_str = " ".join(pull_cmd)
        
        while True:
            # Get commit then pull then get commit again. First get commit is in case
            # the code was manually pulled while we were waiting. This ensures that
            # we are always comparing the correct commits.
            try:
                process = subprocess.run(
                    get_cmd, check=True, stdout=subprocess.PIPE
                )
            except subprocess.CalledProcessError as exc:
                self._log_error(
                    f"'{get_cmd_str}' command failed with error: {exc}"
                )
            else:
                current_commit = process.stdout.decode().strip()
                try:
                    subprocess.run(pull_cmd, check=True)
                except subprocess.CalledProcessError as exc:
                    self._log_error(
                        f"'{pull_cmd_str}' command failed with error: {exc}"
                    )
                else:
                    try:
                        process = subprocess.run(
                            get_cmd, check=True, stdout=subprocess.PIPE
                        )
                    except subprocess.CalledProcessError as exc:
                        self._log_error(
                            f"'{get_cmd_str}' command failed with error: {exc}"
                        )
                    else:
                        new_commit = process.stdout.decode().strip()
                        self._log_info("")
                        self._log_info(f"Current commit: {current_commit}")
                        self._log_info(f"New commit: {new_commit}")
                        if current_commit != new_commit:
                            self._log_info("Commits changed.")
                            self._restarter.do_restart(
                                "Pulled new code from git repo.",
                                force_notify=True
                            )
                        else:
                            self._log_info("Commits are the same. Doing nothing.")

            sleep_interval = 4320 # 360 blocks
            self._log_info(f"Sleeping for {sleep_interval} seconds.")
            time.sleep(sleep_interval)



class ValidatorRestarterRsnScript:
    # Old one on Rizzo server
    #
    # _discord_monitor_url = (
        # "https://discord.com/api/webhooks/1307044814348488704/"
        # "uYEDTqa89CI-NPau5zDyET_JTGt1r2j1u3ARvSEVCKP7-nnOfvCoUoEKwdZCLoiXKsjV"
    # )
    #
    # New one on VO-R server
    #
    _discord_monitor_url = (
        "https://discord.com/api/webhooks/1328849265765777468/"
        "yJg07DYWLJyiFZgZPaLGTmFEwiAu2JWW5osyjFVoqlMWT66JBbV9_FOcslvDdtibtcR0"
    )

    def __init__(self, checker_obj, options):
        self._checker_obj = checker_obj
        self._netuid = options.netuid
        self._discord_notify = options.discord_notify
        self._restart_script =  os.path.expanduser(options.restart_script)
        self._restart_venv = (
            os.path.expanduser(options.restart_venv)
            if options.restart_venv else None)

        self._restart_dir = os.path.expanduser(
            f"~/restart_scripts_sn{options.netuid}")
        os.makedirs(self._restart_dir, exist_ok=True)

        for restart_file in os.listdir(self._restart_dir):
            restart_file_path = os.path.join(self._restart_dir, restart_file)
            if os.path.isfile(restart_file_path):
                os.unlink(restart_file_path)

    def _log_info(self, message):
        bittensor.logging.info(f"{self._checker_obj.log_prefix}: {message}")

    def _log_error(self, message):
        bittensor.logging.error(f"{self._checker_obj.log_prefix}: {message}")

    def do_restart(self, description, force_notify=False):
        # TODO: acquire threading lock
        self._do_restart(description, force_notify)

    def _do_restart(self, description, force_notify):
        script_name =  os.path.basename(__file__)

        self._log_info(f"Restarting subnet {self._netuid}: {description}.")
        self._log_info(f"Running script: {self._restart_script}")
        if self._restart_venv:
            self._log_info(f"Running in venv: {self._restart_venv}")

            fd, restart_script = tempfile.mkstemp(dir=self._restart_dir,
                prefix = f"restart_{self._netuid}_", suffix=".sh")
            os.close(fd)
            os.chmod(restart_script, 0o700)

            self._log_info(f"Packaging venv and script into {restart_script}")
            with open(restart_script, "w") as fd:
                # TODO - This could probably be cleaned up a little
                venv_activate = os.path.join(self._restart_venv, "bin/activate")
                fd.write("#!/bin/bash\n"
                            "\n"
                            "deactivate\n"
                            f"source {venv_activate}\n"
                            f"{self._restart_script}\n")
            restart_cmd = [restart_script]
        else:
            restart_cmd = [self._restart_script]
            restart_script = None

        restart_cmd_str = " ".join(restart_cmd)
        self._log_info(f"Running command: '{restart_cmd_str}'")
        try:
            subprocess.run(restart_cmd, check=True)
        except subprocess.CalledProcessError as exc:
            self._log_error(
                f"'{restart_cmd_str}' command failed with error: {exc}")
            self._send_monitor_notification(
                f"{script_name}: Failed to restart subnet {self._netuid} - {description}",
                force_notify
            )
            return False

        if restart_script:
            os.unlink(restart_script)
        self._log_info(f"Subnet '{self._netuid}' successfully restarted.")
        self._send_monitor_notification(
            f"{script_name}: Successfully restarted on subnet {self._netuid} - {description}",
            force_notify
        )

        return True

    def _send_monitor_notification(self, message, force_notify):
        if not force_notify and not self._discord_notify:
            self._log_info("Not sending discord monitor notification.")
            return

        payload = json.dumps({"content": message})
        monitor_cmd = [
            "curl", "-H", "Content-Type: application/json",
            "-d", payload, self._discord_monitor_url
        ]
        monitor_cmd_str = " ".join(monitor_cmd)
        self._log_info(f"Running command: '{monitor_cmd_str}'")
        try:
            subprocess.run(monitor_cmd, check=True)
        except subprocess.CalledProcessError as exc:
            self._log_error("Failed to send discord monitor notification.")
            self._log_error(
                f"'{monitor_cmd_str}' command failed with error {exc}")
        else:
            self._log_info("Discord monitor notification successfully sent.")


PM2_LOGS_VALIDATORS_DICT = {
    1: ValidatorCheckerPm2LogErrorsSn1,
    10: ValidatorCheckerPm2LogErrorsSn10,
    16: ValidatorCheckerPm2LogErrorsSn16,
    18: ValidatorCheckerPm2LogErrorsSn18,
    21: ValidatorCheckerPm2LogErrorsSn21,
    # 20: ValidatorCheckerPm2LogErrorsSn20,
    # 24: ValidatorCheckerPm2LogErrorsSn24,
    28: ValidatorCheckerPm2LogErrorsSn28,
    30: ValidatorCheckerPm2LogErrorsSn30,
    34: ValidatorCheckerPm2LogErrorsSn34,
    38: ValidatorCheckerPm2LogErrorsSn38,
    42: ValidatorCheckerPm2LogErrorsSn42,
    43: ValidatorCheckerPm2LogErrorsSn43,
    55: ValidatorCheckerPm2LogErrorsSn55,
}


# TODO - This can be done better
DOCKER_LOGS_VALIDATORS_DICT = {
}


def _run_checker(checker_class, options):
    checker_class(options)


def main(options):
    try:
        bittensor.logging.enable_debug()
    except AttributeError:
        bittensor.logging.set_debug(True)

    options.network = (
        f"ws://subtensor-{options.local_subtensor}.rizzo.network:9944"
        if options.local_subtensor
        else "finney"
    )

    if (options.do_check_errors
        and not (options.pm2_process or options.docker_container)
    ):
        bittensor.logging.warning(
            "No --pm2-process or --docker-container is specified. "
            "Not checking for log errors.")
        options.do_check_errors = False

    if options.do_check_stopped_logs and not options.pm2_process:
        bittensor.logging.warning(
            "No --pm2-process is specified. Not checking for "
            "stopped pm2 log output.")
        options.do_check_stopped_logs = False

    sleep_time = 15
    script_name =  os.path.basename(__file__)
    bittensor.logging.info("")
    bittensor.logging.info(f"Starting {script_name} on subnet {options.netuid}")
    bittensor.logging.info(f"Sleeping {sleep_time} seconds in case the "
                            "validator process is just starting.")
    bittensor.logging.info("")
    time.sleep(sleep_time)

    docker_log_checker_class = DOCKER_LOGS_VALIDATORS_DICT.get(
        options.netuid, ValidatorCheckerDockerLogErrors)
    pm2_log_checker_class = PM2_LOGS_VALIDATORS_DICT.get(
        options.netuid, ValidatorCheckerPm2LogErrors)

    options.restarter_class = ValidatorRestarterRsnScript
    with ThreadPoolExecutor(max_workers=TOTAL_CHECKS) as executor:
        if options.do_check_updated:
            bittensor.logging.info("")
            bittensor.logging.info("===============================")
            bittensor.logging.info("Running Updated value checker.")
            bittensor.logging.info("===============================")
            bittensor.logging.info("")
            executor.submit(_run_checker, ValidatorCheckerUpdated, options)

            bittensor.logging.info(f"Sleeping {sleep_time} seconds before "
                                    "starting the next one.")
            time.sleep(sleep_time)

        if options.do_check_vtrust:
            bittensor.logging.info("")
            bittensor.logging.info("==============================")
            bittensor.logging.info("Running vTrust value checker.")
            bittensor.logging.info("==============================")
            bittensor.logging.info("")
            executor.submit(_run_checker, ValidatorCheckerVTrust, options)

            bittensor.logging.info(f"Sleeping {sleep_time} seconds before "
                                    "starting the next one.")
            time.sleep(sleep_time)

        if options.do_check_errors:
            if options.docker_container:
                bittensor.logging.info("")
                bittensor.logging.info("===================================")
                bittensor.logging.info("Running docker log errors checker.")
                bittensor.logging.info("===================================")
                bittensor.logging.info("")
                executor.submit(_run_checker, docker_log_checker_class, options)

                bittensor.logging.info(f"Sleeping {sleep_time} seconds before "
                                        "starting the next one.")
                time.sleep(sleep_time)

            if options.pm2_process:
                bittensor.logging.info("")
                bittensor.logging.info("================================")
                bittensor.logging.info("Running pm2 log errors checker.")
                bittensor.logging.info("================================")
                bittensor.logging.info("")
                executor.submit(_run_checker, pm2_log_checker_class, options)

                bittensor.logging.info(f"Sleeping {sleep_time} seconds before "
                                        "starting the next one.")
                time.sleep(sleep_time)

        if options.do_check_stopped_logs:
            bittensor.logging.info("")
            bittensor.logging.info("==================================")
            bittensor.logging.info("Running stopped pm2 logs checker.")
            bittensor.logging.info("==================================")
            bittensor.logging.info("")
            executor.submit(_run_checker, ValidatorCheckerPm2StoppedLogs, options)

            bittensor.logging.info(f"Sleeping {sleep_time} seconds before "
                                        "starting the next one.")
            time.sleep(sleep_time)
        
        if options.do_check_code:
            bittensor.logging.info("")
            bittensor.logging.info("=============================")
            bittensor.logging.info("Running code update checker.")
            bittensor.logging.info("=============================")
            bittensor.logging.info("")
            executor.submit(_run_checker, ValidatorCheckerCodeUpdate, options)


if __name__ == "__main__":
    options = parse_args()

    # Importing bittensor here suppresses the --help info
    import bittensor

    main(options)
