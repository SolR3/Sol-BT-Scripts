#!/usr/bin/env python3

# standard imports
import argparse


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-s", "--subnet",
        type=int,
        required=True,
        help="The subnet number.")

    default_num_intervals = 10
    parser.add_argument(
        "-n", "--num-intervals",
        dest="num",
        type=int,
        default=default_num_intervals,
        help="The number of weight setting intervals "
             f"to print out. Default: {default_num_intervals}")

    return parser.parse_args()


def main(options):
    rizzo_hotkey = "5F2CsUDVbRbVMXTh9fAzF9GacjVX7UapvRxidrxe7z8BYckQ"

    subtensor = bittensor.subtensor(network="archive")
    metagraph = subtensor.metagraph(netuid=options.subnet)
    rizzo_uid = metagraph.hotkeys.index(rizzo_hotkey)
    last_weight_set_block = metagraph.last_update[rizzo_uid]
    interval_blocks = []
    interval_vtrusts = []

    for i in range(options.num):
        try:
            metagraph = subtensor.metagraph(
                netuid=options.subnet, block=int(last_weight_set_block - 1)
            )
        except:
            print(f"Unable to obtain all {options.num} weight setting intervals.")
            break
        prev_weight_set_block = metagraph.last_update[rizzo_uid]
        interval = str(last_weight_set_block - prev_weight_set_block)
        vtrust = f"{metagraph.Tv[rizzo_uid]:.3f}"
        max_chars = max(len(interval), len(vtrust))
        interval_blocks.append(f"{interval:{max_chars}}")
        interval_vtrusts.append(f"{vtrust:{max_chars}}")
        last_weight_set_block = prev_weight_set_block

    print("")
    print(f"Subnet {options.subnet}:")
    print("Updated Blocks: " + "  ".join(reversed(interval_blocks)))
    print("Vtrust Values:  " + "  ".join(reversed(interval_vtrusts)))
    print("")


if __name__ == "__main__":
    options = parse_args()

    # Importing bittensor here suppresses the --help info
    import bittensor

    main(options)
