#!/usr/bin/env python3

# standard imports
import os
import re
import time


import argparse

def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-n", "--netuid",
        type=int,
        required=True,
        help="The uid of the subnet.")
    
    parser.add_argument(
        "-k", "--keep-days",
        type=float,
        required=True,
        default=3,
        help="The number of days to keep.")
    
    parser.add_argument(
        "-d", "--doit",
        action="store_true",
        help="Actually do the delete.")
    
    parser.add_argument(
        "-l", "--loop",
        int,
        help="Loop and wait rather than run once. Needed when running as a "
             "pm2 process instead of a cron. The value here is the number of "
             "seconds to wait.")
    
    return parser.parse_args()


def main():
    options = _parse_args()
    if options.loop:
        run_on_loop(options)
    else:
        delete_files(options)


def run_on_loop(options):
    while True:
        delete_files(options)
        print(f"Sleeping for {options.loop} seconds.")
        time.sleep(options.loop)


def delete_files(options):
    base_folder = "/dev/shm"
    subnet = options.netuid

    time_threshold = options.keep_days * 86400
    now = time.time()
    file_regexes = {
        37: [r"^torch_\d+_\d+_\d+$", r"^sem.mp-\w+$"],
        38: [r"^torch_\d+_\d+_\d+$"],
    }.get(subnet)

    print("Deleting files:")

    for name in os.listdir(base_folder):
        path = os.path.join(base_folder, name)
        
        if not os.path.isfile(path):
            continue
        
        for file_regex in file_regexes:
            if re.match(file_regex, name):
                break
        else:
            continue
        
        if now - os.stat(path).st_mtime < time_threshold:
            continue

        print(f"    {path}")
        if options.doit:
            os.unlink(path)


if __name__ == "__main__":
    main()
