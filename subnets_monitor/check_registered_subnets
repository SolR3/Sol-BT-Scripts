#!/usr/bin/env python3

# standard imports
import argparse
import json
import multiprocessing
import os
import subprocess
import time


LOCAL_SUBTENSORS = [
    "cali",
    "candyland",
    "datacenter01",
    "la",
    "moonbase",
    "titan",
]

DRYRUN = False


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-j", "--json-folder",
        required=True,
        help="The json folder in which to write the json files."
    )

    parser.add_argument(
        "-i", "--interval",
        type=float,
        default=5,
        help="The number of minutes between data gathering."
    )

    parser.add_argument(
        "-l", "--local-subtensor",
        nargs="?",
        default=False,
        help="Use the specified local subtensor (i.e. la, cali, titan, etc.). "
             "List the flag without a value to rotate between all local "
             "subtensors. When not specified, use the 'finney' network subtensor."
    )

    parser.add_argument(
        "--skip-discord-notify",
        action="store_false",
        dest="discord_notify",
        help="When specified, this will skip sending the notification to the "
             "discord monitor channel."
    )

    return parser.parse_args()


class SubtensorConnectionError(Exception):
    pass


class SubnetsChecker:
    _json_file_name = "registered_subnets.json"
    _discord_monitor_urls = (
        "https://discord.com/api/webhooks/1307044814348488704/"
        "uYEDTqa89CI-NPau5zDyET_JTGt1r2j1u3ARvSEVCKP7-nnOfvCoUoEKwdZCLoiXKsjV",
        "https://discord.com/api/webhooks/1328849265765777468/"
        "yJg07DYWLJyiFZgZPaLGTmFEwiAu2JWW5osyjFVoqlMWT66JBbV9_FOcslvDdtibtcR0"
    )

    def __init__(self, options):
        self._json_file = os.path.join(options.json_folder, self._json_file_name)
        self._network = options.network
        self._discord_notify = options.discord_notify
        self._check_subnets()

    def _check_subnets(self):
        print("\nChecking subnets")
        new_registered_subnet_list = self._get_registered_subnets()
        current_registered_subnet_list = self._read_subnets_json_file()
        self._compare_and_notify(
            current_registered_subnet_list,
            new_registered_subnet_list
        )
        self._write_subnets_json_file(new_registered_subnet_list)

    def _get_registered_subnets(self):
        t1 = time.time()
        registered_subnet_list = []

        print(f"Connecting to subtensor: {self._network}")
        try:
            with bittensor.subtensor(network=self._network) as subtensor:
                for subnet in subtensor.get_subnets()[1:]:
                    print(f"Checking subnet {subnet}")
                    metagraph = subtensor.metagraph(netuid=subnet)
                    if metagraph.hparams.registration_allowed:
                        registered_subnet_list.append(str(subnet))
        except Exception as err:
            print("")
            print(f"ERROR: Subtensor connection failed on '{self._network}'")
            print(f"{type(err).__name__}: {err}")
            print("")
            raise SubtensorConnectionError

        t2 = time.time() - t1
        print(f"Gathered subnet data in {t2:.3} seconds")
        return registered_subnet_list

    def _compare_and_notify(
            self,
            current_registered_subnet_list,
            new_registered_subnet_list
        ):
        if not current_registered_subnet_list:
            return
        added_subnets = sorted(
            set(
                new_registered_subnet_list
            ).difference(
                set(current_registered_subnet_list)
            ),
            key=int
        )
        removed_subnets = sorted(
            set(
                current_registered_subnet_list
            ).difference(
                set(new_registered_subnet_list)
            ),
            key=int
        )
        print(f"Current registered subnets: {current_registered_subnet_list}")
        print(f"New registered subnets:     {new_registered_subnet_list}")
        print(f"Added subnets: {added_subnets}")
        print(f"Removed subnets: {removed_subnets}")
        if added_subnets:
            if len(added_subnets) > 1:
                added_subnets = ", ".join(added_subnets)
                message = (
                    "The following new subnets are open for registration: "
                    f"{added_subnets}"
                )
            else:
                added_subnet = added_subnets[0]
                message = (
                    "The following new subnet is open for registration: "
                    f"{added_subnet}"
                )
            self._notify(message)
        if removed_subnets:
            if len(removed_subnets) > 1:
                removed_subnets = ", ".join(removed_subnets)
                message = (
                    "The following subnets have been de-registered: "
                    f"{removed_subnets}"
                )
            else:
                removed_subnet = removed_subnets[0]
                message = (
                    "The following subnet has been de-registered: "
                    f"{removed_subnet}"
                )
            self._notify(message)

    def _read_subnets_json_file(self):
        if not os.path.exists(self._json_file):
            print(f"Json file {self._json_file} does not exist. "
                  "This must be the first time running.")
            return None
        with open(self._json_file, "r") as fd:
            return json.load(fd)

    def _write_subnets_json_file(
            self,
            registered_subnet_list
        ):
        with open(self._json_file, "w") as fd:
            return json.dump(registered_subnet_list, fd)

    def _notify(self, message):
        if not self._discord_notify:
            print("Not sending discord monitor notification.")
            return

        payload = json.dumps({"content": message})
        for url in self._discord_monitor_urls:
            monitor_cmd = [
                "curl", "-H", "Content-Type: application/json",
                "-d", payload, url
            ]
            monitor_cmd_str = " ".join(monitor_cmd)
            print(f"Running command: '{monitor_cmd_str}'")
            if DRYRUN:
                print(message)
                continue

            try:
                subprocess.run(monitor_cmd, check=True)
            except subprocess.CalledProcessError as exc:
                print("Failed to send discord monitor notification."
                    f"\n'{monitor_cmd_str}' command failed with error {exc}")
            else:
                print("Discord monitor notification successfully sent.")


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)

    runtime_text = [f"{minutes} minutes"] if minutes else []
    if seconds:
        runtime_text += [f"{seconds} seconds"]
    runtime_text = ", ".join(runtime_text)

    return runtime_text


def get_subtensor_network(local_subtensor, local_subtensor_index):
    if local_subtensor is False:
        return "finney"

    network_name = (
        local_subtensor or LOCAL_SUBTENSORS[local_subtensor_index]
    )
    return f"ws://subtensor-{network_name}.rizzo.network:9944"


# def check_subnets(options):
#     SubnetsChecker(options)


def main(options):
    interval_seconds = round(options.interval * 60)
    local_subtensor_index = -1

    while True:
        start_time = time.time()
        local_subtensor_index = \
            (local_subtensor_index + 1) % len(LOCAL_SUBTENSORS)
        options.network = get_subtensor_network(
            options.local_subtensor, local_subtensor_index
        )

        try:
            args = [options]
            with multiprocessing.Pool(processes=1) as pool:
                pool.apply(SubnetsChecker, args)
        except SubtensorConnectionError:
            if options.local_subtensor is None:
                print("Rotating subtensors and trying again.")
                time.sleep(1)
                continue

        total_seconds = round(time.time() - start_time)

        wait_seconds = interval_seconds - total_seconds
        if wait_seconds > 0:
            wait_time_formatted = format_time(wait_seconds)
            print(f"Waiting {wait_time_formatted}.")
            time.sleep(wait_seconds)
        else:
             interval_formatted = format_time(interval_seconds)
             print(f"Subnets check took longer than {interval_formatted}. "
                   "Not waiting.")


if __name__ == "__main__":
    options = _parse_args()

    # Importing bittensor here suppresses the --help info
    import bittensor

    main(options)
