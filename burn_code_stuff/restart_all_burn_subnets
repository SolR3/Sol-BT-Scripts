#!/usr/bin/env python3

# standard imports
import argparse
import os
import json
import subprocess
import tempfile


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "burn_exec_dir",
        help="The folder containing the burn_subnet.py file."
    )

    parser.add_argument(
        "burn_venv",
        help="The path to the venv used for running burn code "
             "(without the bin/activate part)."
    )

    return parser.parse_args()


def main(options):
    start_burn_script = os.path.join(
        os.path.expanduser(options.burn_exec_dir), "start_burn"
    )
    burn_script_dir = options.burn_exec_dir
    venv_path = os.path.join(
        os.path.expanduser(options.burn_venv), "bin/activate"
    )

    script_lines = ["#!/bin/bash", ""]

    data_file = os.path.expanduser(
        "~/.bittensor/burn_subnets_data/burn_subnets_data.json"
    )
    with open(data_file, "r") as fp:
        burn_subnets = json.load(fp)

    # even out the restarts across two epochs
    num_burn_subnets = len(burn_subnets)
    wait_seconds = int(720 * 12 / num_burn_subnets)
    for i, burn_subnet in enumerate(burn_subnets):
        script_lines.append(f"echo Restarting subnet {burn_subnet}")
        burn_command = f"{start_burn_script} {burn_script_dir} {venv_path} {burn_subnet}"
        if burn_subnet == 104:
            burn_command += " --target_uid 29 --set_weights_interval 100"
        script_lines.append(burn_command)
        if i < num_burn_subnets - 1:
            script_lines.extend(
                [f"echo Sleeping {wait_seconds} seconds", f"sleep {wait_seconds}", ""]
            )

    script_text = "\n".join(script_lines) + "\n"

    fp, restart_script = tempfile.mkstemp(
        prefix="restart_burn_subnets_", suffix=".sh"
    )
    os.close(fp)
    os.chmod(restart_script, 0o700)

    with open(restart_script, "w") as fp:
        fp.write(script_text)

    print("")
    print("Restarting all burn subnets")
    print(f"Shell script: {restart_script}")
    print("")
    try:
        subprocess.run([restart_script], check=True)
    except subprocess.CalledProcessError as exc:
        print(f"\nERROR: Command failed with error: {exc}")

    os.unlink(restart_script)


if __name__ == "__main__":
    options = parse_args()
    main(options)
